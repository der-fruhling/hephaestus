%hephaestus 0.1.0
# assembled version 0x0000

[!target(ambiguous)]
[!metadata(producer, string, hephaestus bytecode assembler)]
[!metadata(producer-version, string, 0.1.0)]
[!metadata(producer-target, target, native/linux/x86_64)]

import static "c" as @%0

import dynamic "nothing" as @%1

import world "wasi:cli/command@0.2.0" from component ".components/771d6ca95a904a0fab9d5f026314c3e35da4add7dad0085ffbeaa05b6f3a1f4e.wasm" as @%2

internal globl @%3: u32 = {
    const u32 42
    return
}

internal globl mutable @%4: u_ptr

internal struct @%5 {
    $first: u8,
    $second: u_ptr,
}

internal enum @%6: u8 {
    $Ok = 0,
    $Errored = 1,
}

internal struct @%7 {
    $test: ref @%5,
    $state: enum /* u8 */ @%6,
}

# index = @%8
internal from @%0 / malloc import funct @malloc($len: u_ptr) -> u_ptr

# index = @%9
internal from @%0 / free import funct @free($len: u_ptr) -> u_ptr

internal funct @%10($src: u_ptr, $tgt: u_ptr, $len: u64) -> u_ptr
{
    local.get u64 $%2
    loop {
        dup
        const u64 0
        if {
            break
        }
        dup
        const u64 8
        if {
            local.get u_ptr $%0
            const u64 8
            add
            dup
            local.set u_ptr $%0
            mem.load u64 -8
            local.get u_ptr $%1
            const u64 8
            add
            dup
            local.set u_ptr $%1
            mem.store u64 -8
            const u64 8
            sub
        } else {
            local.get u_ptr $%0
            const u64 1
            add
            dup
            local.set u_ptr $%0
            mem.load u8 -1
            local.get u_ptr $%1
            const u64 1
            add
            dup
            local.set u_ptr $%1
            mem.store u8 -1
            const u64 1
            sub
        }
    }
}

# index = @%11
export noaccessible nodocument funct @main($argc: u32, $argv: u_ptr) -> i32
{
    locals [i32, i32]

    const i32 1
    const u64 7
    cast u64 -> i32
    sub
    local.set i32 $%2
    const i32 0
    local.set i32 $%3
    local.get i32 $%2
    local.get i32 $%3
    add
    const u64 69
    cast u64 -> u_ptr
    call @%8
    dup
    const u64 777
    mem.store u64 +8
    call @%9
    return
}

