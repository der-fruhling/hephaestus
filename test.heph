%hephaestus 0.1.0

# this is a test comment

/* this is a second test comment */

/*
 * multiline!
 */

import static "c" as @libc
import dynamic "nothing" as @nothinglib
import world "wasi:cli/command@0.2.0" from component "wasi.wasm" as @wasi

internal globl @test_imm: u32 = {
    const u32 42
    return
}

internal globl mutable @test_mut: u_ptr

internal struct @test_struct {
    $first: u8,
    $second: u_ptr
}

export enum @test_state : u8 {
    $Ok = 0,
    $Errored = 1
}

export struct @test_pub_struct {
    $test: ref @test_struct,
    $state: enum @test_state
}

from @libc / malloc import funct @malloc($len: u_ptr) -> u_ptr
from @libc / free import funct @free($len: u_ptr) -> u_ptr

export funct @memcpy($src: u_ptr, $tgt: u_ptr, $len: u64) -> u_ptr
{
    local.get u64 $len
    
    loop {
        dup
        const u64 0
        test.eq

        if {
            break
        }

        dup
        const u64 8
        test.geq

        if {
            # copy 8 bytes at a time
            local.get u_ptr $src
            const u64 8
            add
            local.tee u_ptr $src
            mem.load u64 -8

            local.get u_ptr $tgt
            const u64 8
            add
            local.tee u_ptr $tgt
            mem.store u64 -8

            const u64 8
            sub
        } else {
            # copy one byte at a time
            local.get u_ptr $src
            const u64 1
            add
            local.tee u_ptr $src
            mem.load u8 -1

            local.get u_ptr $tgt
            const u64 1
            add
            local.tee u_ptr $tgt
            mem.store u8 -1

            const u64 1
            sub
        }
    }
}

export nodocument noaccessible funct @main($argc: u32, $argv: u_ptr) -> i32
{
    local $test: i32;
    local $return_value: i32;

    const i32 1
    const u64 7
    cast u64 -> i32
    sub
    local.set i32 $test

    const i32 0
    local.set i32 $return_value

    local.get i32 $test
    local.get i32 $return_value
    add

    const u64 69
    cast u64 -> u_ptr
    call @malloc

    dup
    const u64 777
    mem.store u64 +8

    call @free

    return
}
